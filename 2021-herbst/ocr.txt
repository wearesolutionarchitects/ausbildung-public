Diese Kopfleiste bitte unbedingt ausfüllen!
Familienname, Vorname (bitte durch eine Leerspalte trennen)
IHK
Bereich
Berufsnummer
55
1 1 96
Sp. 1-2
Sp. 3-6
1196
IHK-Nummer
Prüflingsnummer
_Termin: Mittwoch, 24. November 2021
Sp. 7-9
Sp. 10-14
Abschlussprüfung Winter 2021/22
Ganzheitliche Aufgabe I
Fachqualifikationen
Fachinformatiker
Fachinformatikerin
Anwendungsentwicklung (AO 1997)
5 Handlungsschritte
mit Belegsatz
90 Minuten Prüfungszeit
100 Punkte
Hinweis:
Bei der Bearbeitung der Aufgaben ist von
einem gewöhnlichen Geschäftsbetrieb
auszugehen, der nicht durch die
COVID-19-Pandemie beeinflusst bzw.
durch entsprechende behördliche Verfügun-
gen eingeschränkt ist.
Bearbeitungshinweise
1. Der vorliegende Aufgabensatz besteht aus insgesamt 5 Handlungsschritten zu je 25
Punkten.
In der Prüfung zu bearbeiten sind 4 Handlungsschritte, die vom Prüfungsteil-
nehmer frei gewählt werden können.
Der nicht bearbeitete Handlungsschritt ist durch Streichung des Aufgabentextes im
Aufgabensatz und unten mit dem Vermerk „Nicht bearbeiteter Handlungsschritt: Nr.
.... , an Stelle einer Lösungsniederschrift deutlich zu kennzeichnen. Erfolgt eine solche
Kennzeichnung nicht oder nicht eindeutig, gilt der 5. Handlungsschritt als nicht bear-
beitet.
2. Füllen Sie zuerst die Kopfzeile aus. Tragen Sie Ihren Familiennamen, Ihren Vornamen
und Ihre Prüflings-Nr. in die oben stehenden Felder ein.
3. Lesen Sie bitte den Text der Aufgaben ganz durch, bevor Sie mit der Bearbeitung be-
ginnen.
4. Halten Sie sich bei der Bearbeitung der Aufgaben genau an die Vorgaben der
Aufgabenstellung zum Umfang der Lösung. Wenn z. B. vier Angaben gefordert werden
und Sie sechs Angaben anführen, werden nur die ersten vier Angaben bewertet.
Tragen Sie die frei zu formulierenden Antworten dieser offenen Aufgabenstellungen
in die dafür It. Aufgabenstellung vorgesehenen Bereiche (Lösungszeilen, Formulare,
Tabellen u. a.) des Arbeitsbogens ein.
6. Sofern nicht ausdrücklich ein Brief oder eine Formulierung in ganzen Sätzen gefordert
werden, ist eine stichwortartige Beantwortung zulässig.
7. Verwenden Sie nur einen Kugelschreiber und schreiben Sie deutlich und gut lesbar. Ein
nicht eindeutig zuzuordnendes oder unleserliches Ergebnis wird als falsch gewertet.
8. Zur Lösung der Rechenaufgaben darf ein nicht programmierter, netzunabhängiger
Taschenrechner ohne Kommunikationsmöglichkeit mit Dritten verwendet werden.
9. Wenn Sie ein gerundetes Ergebnis eintragen und damit weiterrechnen müssen, rechnen
Sie (auch im Taschenrechner) nur mit diesem gerundeten Ergebnis weiter.
10. Für Nebenrechnungen/Hilfsaufzeichnungen können Sie das im Aufgabensatz ent-
haltene Konzeptpapier verwenden. Dieses muss vor Bearbeitung der Aufgaben heraus-
getrennt werden. Bewertet werden jedoch nur Ihre Eintragungen im Aufgabensatz.
Nicht bearbeiteter Handlungsschritt ist Nr.
Wird vom Korrektor ausgefüllt!
Bewertung
Für die Bewertung gilt die Vorgabe der Punkte in den Lösungshinweisen. Für den abgewählten Handlungsschritt
ist anstatt der Punktzahl die Buchstabenkombination „AA" in die Kästchen einzutragen.
Punkte
1. Handlungs-
Punkte
Punkte
Z. Handlungs- 3. Handlungs-
Punkte
4. Handlungs
Punkte
5. Handlungs-
conrin
Prüfungszeit
Spalte
17
25
Die entsprechende Ziffer (1, 2 oder 3)
finden Sie in der Abfrage nach der
Prüfungszeit im Anschluss an die letzte
Aufgabe.
Gesamtpunktzahl
26
27
28
Prüfungsort, Datum
Unterschrift
Gemeinsame Prüfungsaufgaben der Industrie- und Handelskammern. Dieser Aufgabensatz wurde von einem überregionalen
Ausschuss, der entsprechend § 40 Berufsbildungsgesetz zusammengesetzt ist, beschlossen.
Die Vervielfältigung, Verbreitung und öffentliche Wiedergabe der Prüfungsaufgaben und Lösungen ist nicht gestattet. Zuwider-
handlungen werden zivil- und strafrechtlich (§$ 97 ff., 106 ff. UrhG) verfolgt. - © ZPA Nord-West 2021 - Alle Rechte vorbehalten!


Die Handlungsschritte 1 bis 5 beziehen sich auf die folgende Ausgangssituation:
Die WärL Chemie GmbH expandiert und plant in diesem Zusammenhang ein neues Gebäude. Für dieses Projekt übernimmt die
IT-Abteilung der WärL Chemie GmbH selbst die Realisierung der Gebäudesteuerung und Wartungsarbeiten.
Sie sollen vier der folgenden fünf Aufgaben in diesem Projekt erledigen:
1. Zustandsdiagramm und Anwendungsfalldiagramm für Controller und Lichtsteuerung erstellen
2. 00P-Methoden für die Auswertung von Temperaturmessungen implementieren
3. UML-Modellierung für ein Smartphone-Dashboard zur Anzeige von Tankfüllständen anfertigen
4. ER-Modell zur Speicherung von Sensordaten anlegen
5. SQL-Abfragen für eine Zeiterfassungsdatenbank formulieren
Korrekturrand
1. Handlungsschritt (25 Punkte)
a) Für jeden Flur der Gebäude der WärL Chemie GmbH soll eine automatisierte Lichtsteuerung eingerichtet werden.
Der Controller zur Lichtsteuerung kann sich in einem der Zustände „wartend", „auto", „manuell" oder „zeitgesteuert" befinden.
- Der Controller befindet sich initial im Zustand „wartend" bei ausgeschaltetem Licht.
- Wenn Sensoren Personen im Flur erkennen, wechselt der Controller in den Zustand „auto" und das Licht wird mit dem
Eintritt in diesen Zustand eingeschaltet.
- Wenn keine Personen mehr im Flur erkannt werden und sich der Controller im Zustand „auto" befindet, findet ein Wechsel
in den Zustand „zeitgesteuert" statt.
- Falls innerhalb einer festgelegten Zeitspanne erneut Personen erkannt werden, erfolgt ein Wechsel vom Zustand „zeitge-
steuert" in den Zustand „auto"
- Falls innerhalb der Zeitspanne keine Personen den Flur betreten, erfolgt ein Wechsel in den Zustand „wartend" und das
Licht wird bei Eintritt in diesen Zustand ausgeschaltet.
- Da beim Übergang vom Zustand „wartend" in den Zustand „auto" das Licht etwas verzögert eingeschaltet wird, kann eine
Person (im Zustand „auto") das Licht manuell einschalten, solange es noch aus ist. Dann erfolgt ein Zustandswechsel in den
Zustand „manuell" und das Licht wird mit Eintritt in diesen Zustand eingeschaltet.
- Im Zustand „manuell" kann das Licht von einer Person ausgeschaltet werden. Der Controller wechselt dabei in den Zustand
„wartend". Falls von den Sensoren keine Personen mehr erfasst werden, erfolgt ein Übergang vom Zustand „manuell" in
den Zustand „zeitgesteuert".
Erstellen Sie für die beschriebene Situation ein Zustandsdiagramm für den Controller der Lichtsteuerung.
15 Punkte
ZPA FI Ganz | Anw 2


b) Im Rahmen der neuen Aufgaben für das Gebäudemanagement fallen für die Mitarbeiter folgende Tätigkeiten an:
- Für Wartungsmitarbeiter fallen entsprechende Wartungen und Kalibrierungen für die Sensoren an. Für die Wartung ist ein
Login erforderlich, falls dieser noch nicht erfolgt ist.
- Administratoren können Sensordaten auswerten. Dazu müssen in jedem Fall Sensordaten gelesen werden. Falls dies noch
nicht erfolgt ist, ist für die Auswertung der Daten ein Login erforderlich.
- Jeder Mitarbeiter kann die Sensordaten auslesen.
Erstellen Sie für die beschriebene Situation ein Anwendungsfalldiagramm.
10 Punkte
Korrekturrand
ZPA Fl Ganz | Anw 3


2. Handlungsschritt (25 Punkte)
In einem Gebäudeteil gibt es Sensoren, die Temperaturwerte in unregelmäßigen Zeitabständen messen. Zur Auswertung der Mess-
werte sollen u. a. zwei Methoden implementiert werden. Folgende Klassen sind bereits vorhanden:
Value
- sensor_id : Integer
- value: Double
- time: Long
+ Konstruktor(sensor_id: Integer, value: Double, time: Long)
+ getld() : Integer
+ getValue() : Double
+ getTime(): Long
Korrekturrand
+setValue(value: Value)
+ getValue(sensor_id, pos: Integer) : Value
+getSize(sensor_id: Integer): Integer
TempList
Speichert ein Value-Objekt chronologisch in einer Liste. Die Objekte werden für
jeden Sensor getrennt gespeichert.
Liefert für den Sensor mit der übergebenen Sensor-ld das Value-Objekt an der
Position pos.
Liefert die Anzahl der gespeicherten Value-Objekte für den Sensor mit der überge-
benen Sensor-ld.
a) Sobald an einem Sensor eine neue Messung vorliegt, wird automatisch die Methode
onNewValue(sensor_id: Integer, value: Double, time: Long)
aufgerufen.
Die Methode onNewValue soll mit folgender Funktionalität implementiert werden:
- Erstellen eines Value-Objektes mit den übergebenen Parametern (siehe Klassendiagramm für Value)
- Speichern des Value-Objektes mit der Methode setValue des Objektes tempList (das Objekt vom Typ TempList ist bereits
vorhanden und kann verwendet werden, siehe Klassendiagramm TempList).
Implementieren Sie die Methode onNewValue in Pseudocode.
onNewValue (sensor_id: Integer, value: Double, timestamp: Long)
5 Punkte
ZPA FI Ganz | Anw 4


b) Um Temperaturdaten dieses Gebäudes statistisch auswerten zu können, soll eine Methode
maxPeriod(sensor_id: Integer, mindestwert: Double): Integer
implementiert werden, die aus allen in tempList gespeicherten Temperaturwerten die höchste Anzahl von hintereinander ge-
speicherten Werten des Sensors ermittelt, welche den vorgegebenen Mindestwert einhalten.
Beispiel:
Es liegen die Temperaturwerte 20, 22, 23, 21, 19, 18, 20, 22, 23, 23, 24, 22, 21 vor.
Die höchste Anzahl von hintereinanderliegenden Werten, welche den Mindestwert 22 einhalten, ist fünf.
Implementieren Sie die Methode maxPeriod in Pseudocode.
20 Punkte
maxPeriod (sensor_id: Integer, mindestwert: Double) : Integer
Korrekturrand
ZPA FI Ganz | Anw 5


Diese Seite bleibt aus drucktechnischen Gründen frei.
ZPA FI Ganz | Anw 6


3. Handlungsschritt (25 Punkte)
Eine Smartphone-Anwendung mit unterschiedlichen Anzeigemöglichkeiten für Tankfüllstände soll entwickelt werden.
Korrekturrand
Dashboard
Tank 1 (4523 l)
67,77%
Tank 2 (2347 l)
55,45 %
Tank 3 (1356 |)
65,66%
Tank 4 (7724 1)
23,88 %
Tank 5 (4620 1)
87,90 %
Tank 6 (6654 l)
12,77 %
In einer ersten implementierung soll eine „Dashboard"-Anzeige, welche die Füllstände aller Tanks anzeigt und später eine
„History"-Anzeige, die den zeitlichen Verlauf des Füllstands eines Tanks darstellt, erstellt werden.
a) Zunächst soll eine Klasse Tank für Tankobjekte modelliert werden.
aa) Die Klasse Tank soll Folgendes beinhalten:
- Die nur klassenintern sichtbaren Instanzvariablen bezeichner, fuellstand, fassungsvermoegen
- Einen öffentlichen Konstruktor zur Initalisierung der Instanzvariablen.
- Beispielhaft für den fuellstand je eine öffentliche Set- und Get-Methode.
Hinweis: Geben Sie jeweils sinnvolle Datentypen an.
Erstellen Sie das UML-Klassendiagramm für die Klasse Tank.
7 Punkte
ab) Implementieren Sie in Pseudocode die Set- und Get-Methode für die Instanzvariable fuellstand der Klasse Tank. 4 Punkte
Fortsetzung 3. Handlungsschritt →
ZPA FI Ganz | Anw 7


Fortsetzung 3. Handlungsschritt
b) Die Füllstände der Tanks werden stündlich aktualisiert. Alle Anzeigen sollen entsprechend angepasst werden. Ein noch unvoll-
ständiger Entwurf nach dem Observer-Muster zur Umsetzung dieser Anforderung liegt bereits vor.
TankDaten
«interface»
Observer
observers : Observe
sellstaende : int
- fuellstaende_datum : String0U
+ setDaten(int[], String(10 : voic
+ getFuellstaende () : int[
+ updatel) : void
Korrekturrand
Dashboard
History
+ notifyObservers() : void
+ Dashboard(o : ObservedSubject)
+ display() : void
- History(o : ObservedSubject
+ display() : voic
<<interface>>
ObservedSubject
+ addObserver(Observer) : void
+ removeObserver(Observer) : void
+ notifyObservers() : void
ba) Ergänzen Sie im obigen Klassendiagramm in den Klassen TankDaten, Dashboard und History die jeweils fehlende Imple-
mentierung und die Beziehung zwischen der Klasse Tankdaten und dem Interface Observer.
4 Punkte
bb) Erläutern Sie die Art der Beziehung zwischen den Klassen Tankdaten und ObservedSubject.
2 Punkte
ZPA FI Ganz | Anw 8


c) Zu Dokumentationszwecken soll nachfolgend beschriebener Programmablauf exemplarisch dargestellt werden.
ca) Ergänzen Sie das folgende UML-Sequenzdiagramm.
6 Punkte
- Der Client erzeugt ein TankDaten- und ein Dashboard-Objekt.
- Im Konstruktor des Dashboard-Objekts wird die Methode addObserver aufgerufen.
- Der Client ruft die Methode setDaten auf.
- In der Methode setDaten wird notifyObservers gestartet.
- Die Methode notifyObservers führt update aus.
- Die Methode update holt sich über den Aufruf der Methode getFuellstaende das Array mit den aktuellen Füllständen
der Tanks und startet die Methode display zur Anzeige der Daten.
- Der Kontrollfluss geht von display über update, notifyObservers und setData zurück zum Client.
Hinweis: Die ersten drei Spiegelstriche sind bereits umgesetzt.
Client
Korrekturrand
create
:TankDaten
create
:Dashboard
addObserver(Observer)
口
K-
setDaten (int[], String[])
cb) Die Methode notifyObservers benachrichtigt über den Aufruf von update alle registrierten Observer.
Implementieren Sie notifyObservers in Pseudocode.
2 Punkte
ZPA FI Ganz | Anw 9


4. Handlungsschritt (25 Punkte)
a) Die WärL Chemie GmbH soll zur Speicherung der Sensordaten ein ER-Modell erstellen.
- Jeder Sensor hat eine eigene Sensor-Art.
- Mehrere Sensoren können von der gleichen Sensor-Art sein.
- Ein Sensor hat einen festen/bestimmten Standort.
- An einem Standort können verschiedene Sensoren sein.
- Von einem Sensor können mehrere Messungen durchgeführt werden.
- Eine Messung kann verschiedene Aktionen auslösen.
- Eine Aktion kann von unterschiedlichen Messungen ausgelöst werden.
- Zu jeder ausgelösten Aktion kann genau ein Eintrag im Aktionsprotokoll gehören.
- Es gibt mehrere Aktions-Arten, die durch eine Aktion ausgelöst werden können.
Erstellen Sie ein ER-Modell. Attribute müssen nicht erfasst werden.
Korrekturrand
20 Punkte
b) Die Tabelle Aktion-Art soll nicht mehr verwendet werden. Daher soll in der Tabelle Aktion das Attribut Art-ld entfernt werden
und die Beschreibung der Aktion-Art hinzugefügt werden.
Beschreiben Sie das Problem, welches bei dieser Vorgehensweise auftreten kann.
5 Punkte
ZPA FI Ganz | Anw 10


5. Handlungsschritt (25 Punkte)
Sie sollen SQL-Abfragen für folgende Zeiterfassungsdatenbank erstellen.
Mitarbeiter
MAID Nachname Vorname
Müller
Geb-Datum
Tagesarbeitszeit
811
14.04.1995
812
Jens
8
Scholz
Birgit
23.08.1977
815
Schmidt
02.11.1970
817
Ulrich
Hans
841
Storck
14.11.2003
Ullmann
Franz
21.12.1972
48
88
Fehlzeit
FZ_ID
1
2
3
4
5
MALID
811
902
811
811
815
902
Sorge
Susanne
02.03.1965
815
Von_Datum
18.10.2021
18.10.2021
30.12.2021
03.01.2022
30.06.2022
03.07.2022
Bis_Datum
22.10.2021
05.11.2021
31.12.2021
05.01.2022
30.06.2022
08.07.2022
Grund
Krank
Krank
Urlaub
Urlaub
Urlaub
Urlaub
Hinweis: Jahresübergreifender Urlaub generiert zwei Datensätze (siehe FZ_ID 3 und 4).
a) Für den Mitarbeiter Ulrich Schmidt wurde in der Tabelle Fehlzeit ein Datensatz falsch erfasst:
Statt einer zweitägigen „Dienstreise" vom 30.06. bis 01.07.2022 wurde versehentlich ein eintägiger „Urlaub" für den
30.06.2021 eingetragen (siehe Tabelle Fehlzeit).
Erstellen Sie eine SQL-Anweisung, mit der die Korrektur durchgeführt werden kann.
Korrekturrand
Fehltage
5
16
2
3
1
6
5 Punkte
b) Erstellen Sie eine SQL-Abfrage, welche die Urlaubstage aller Mitarbeiter im Jahr 2021 ermittelt.
Beispielausgabe:
811
Müller
Jens
812
815
Scholz
Schmidt
Birgit
Ulrich
817
Storck Hans
0
841
Ullmann
Franz
10 Punkte
Fortsetzung 5. Handlungsschritt →
ZPA FI Ganz | Anw 11


Fortsetzung 5. Handlungsschritt
c) Die bestehende Datenbank soll wie im Folgenden beschrieben verändert werden.
Erstellen Sie dazu jeweils die SQL-Anweisung.
ca) Die Tabelle Fehlzeit soll gelöscht werden.
Korrekturrand
2 Punkte
cb)
Es soll eine Tabelle Fehlzeitgrund mit folgenden Feldern erstellt werden.
Fehlzeitgrund
Grund ID
1
Grund
Urlaub
2
3
Krank
Dienstreise
3 Punkte
Hinweis: Es müssen keine Datensätze eingefügt werden.
cc) Die Tabelle Fehlzeit soll in der dargestellten Form neu erstellt werden. In die Tabelle Fehlzeit sollen in der Spalte Grund_ID
nur solche Werte eingetragen werden können, die in der Tabelle Fehlzeitgrund als Primärschlüssel vorkommen. 5 Punkte
Fehlzeit
FZ ID
1
2
MA_ID
811
902
Von_Datum
18.10.2021
18.10.2008
Bis_Datum
22.10.2021
05.05.2021
Grund ID
1
2
Fehltage
5
16
PRÜFUNGSZEIT - NICHT BESTANDTEIL DER PRÜFUNG!
Wie beurteilen Sie nach der Bearbeitung der Aufgaben die zur Verfügung stehende Prüfungszeit?
[I Sie hätte kürzer sein können.
2 Sie war angemessen.
[3 Sie hätte länger sein müssen.
ZPA FI Ganz | Anw 12


IHK
Abschlussprüfung Winter 2021/22
Belegsatz
Fachinformatiker Anwendungsentwicklung (AO 1997)
Fachinformatikerin Anwendungsentwicklung (AO 1997)
1196
1
Ganzheitliche Aufgabe I
Fachqualifikationen
Inhalt
UML-Anwendungsfalldiagramm
UML-Zustandsdiagramm
UML-Sequenzdiagramm
UML-Klassendiagramm
Pseudocode
SQL-Syntax (Auszug)
4
5/6
Gemeinsame Prüfungsaufgaben der Industrie- und Handelskammern. Dieser Aufgabensatz wurde von einem überregionalen
Ausschuss, der entsprechend § 40 Berufsbildungsgesetz zusammengesetzt ist, beschlossen.
Die Vervielfältigung, Verbreitung und öffentliche Wiedergabe der Prüfungsaufgaben und Lösungen ist nicht gestattet. Zuwider-
handlungen werden zivil- und strafrechtlich (§§ 97 ff., 106 ff. UrhG) verfolgt. - © ZPA Nord-West 2021 - Alle Rechte vorbehalten!


2
UML-Anwendungsfalldiagramm
Anwendungsfalldiagramm
Akteur
Anwendungsfall
Condition: [bedingung}
Anwendungsfall
<<extend>>
<<include>>
spezialisierter
Anwendungsfall
Sekundärer
Anwendungsfall
Sekundärer
Anwendungsfall
UML-Zustandsdiagramm, Notation (Auszug)
Zustand
Ereignis[Bedingung]/Handlung
Beispiel
offen
/schließen
zu
Anfangszustand
Zustand, den ein Element einnehmen kann.
z. B. Element = Fenster; Zustände: Offen, geschlossen
Zustandsübergang (Transition) von einem Quellzustand zu einem Zielzustand
In der Beschriftung kann Folgendes angegeben werden:
- Ein Ereignis (trigger), welches den Zustandsübergang auslöst
- Eine Bedingung (guard), welche beim Zustandsübergang erfüllt sein muss
- Eine Handlung (action), welche den Zustandsübergang bewirkt
Selbstaufruf
Zustand
Ereignis[Bedingung]/Handlung
Endzustand
ZPA FIB Ganz | 2


UML-Sequenzdiagramm
Sequenzdiagramm
x:Klasse1
y:Klasse2
Nachricht()
alt
[i>0]
nachricht1()
[else]
nachricht2()
17
Selbstaufruf
Lebenslinie
Ausführung(opt.)
create
Objekt-
Konstruktion
Objekt-
Destruktion
3
synchrone Nachricht
Antwort
asynchrone Nachricht
synchrone Nachricht:
Der Sender erwartet vom
Empfänger ein Beenden des
Aufrufs, Rückgabewert (z.B. 17)
möglich
asynchrone Nachricht:
Der Sender erwartet vom
Empfänger keine Antwort
:KlasseX
ZPA FIB Ganz | 3


4
UML-Klassendiagramm
Klassendiagramm
Klasse
Klasse
«‹abstract>>
Klasse
attributi
attribut2
methode1(
methode 2(
methode1()
methode 2()
<<interface>>
Schnittstelle
Notiz
methode1()
methode2()
Syntax für Attribute
Sichtbarkeit Attributname : Typ {Eigenschaften
syntax für Methoden
sichtbarkeit Methodenname(Parameterliste) : Rückgabetyp {Eigenschaften
Sichtbarkeit:
+ public
† protecte
- private
~ package
Eigenschaften:
{static, final, ...}
Klasse1
Klasse1
Klasse1
Klasse1
Ganzes
Ganzes
Klasse
Vererbung
D
Assoziation
Multiplizität/Kardinalität
gerichtete Assoziation
Aggregation
Komposition
Implementierung
---D
Klasse2
Klasse2
Klasse2
Klasse2
Teil
Existenz-
abhängiges
Teil
<<interface>>
Schnittstelle
Pseudocode
Pseudocode
wenn
[ Bedingung ] dann
Anweisung1
sonst
[ Anweisung ]
Ende wenn
zähle [ Variable ] von
[ Schleifeninhalt ]
Ende zähle
solange [ Bedingung ]
[ Schleifeninhalt ]
Ende solange
wiederhole
[ Schleifeninhalt ]
solange < Bedingung >
:=
=; <; >; <=; >=; < >
integer
double
string
array
Beschreibung
Verzweigung
[ Startwert] bis [Endwert]
Zählschleife
(Iteration)
Kopfgesteuerte
Schleife
Fußgesteuerte
Schleife
Zuweisung
Vergleiche
ZPA FIB Ganz |4


5
SQL-Syntax (Auszug)
Syntax
Tabelle
CREATE TABLE Tabellenname(
Spaltenname < DATENTYP >,
Primärschlüssel,
Fremdschlüssel)
ALTER TABLE Tabellenname
ADD COLUMN Spaltenname Datentyp
DROP COLUMN Spaltenname Datentyp
ADD FOREIGN KEY(Spaltenname)
REFERENCES Tabellenname(
Primärschlüsselspaltenname
CHARACTER
DECIMAL
DOUBLE
INTEGER
DATE
PRIMARY KEY (Spaltenname)
FOREIGN KEY (Spaltenname)
REFERENCES Tabellenname(
Primärschlüsselspaltenname
DROP TABLE Tabellenname
Befehle, Klauseln, Attribute
SELECT * | Spaltenname1 [, Spaltenname2, ...]
FROM
SELECT ...
(SELECT ...
FROM ...
WHERE ....) AS xyz
FROM ...
WHERE ...
SELECT DISTINCT
Beschreibung
Erzeugt eine neue leere Tabelle mit der beschriebenen Struktur
Änderungen an einer Tabelle:
Hinzufügen einer Spalte
Entfernen einer Spalte
Definiert eine Spalte als Fremdschlüssel
Textdatentyp
Numerischer Datentyp (Festkommazahl)
Numerischer Datentyp (Doppelte Präzision)
Numerischer Datentyp (Ganzzahl)
Datum (Format DD.MM.YYYY)
Erstellung eines Primärschlüssels
Erstellung einer Fremdschlüssel-Beziehung
Löscht eine Tabelle
Wählt die Spalten einer oder mehrerer Tabellen, deren Inhalte in die Liste
aufgenommen werden sollen; alle Spalten (*) oder die namentlich aufgeführten
Name der Tabelle oder Namen der Tabellen, aus denen die Daten der Ausgabe
stammen sollen
Unterabfrage, die in eine äußere SELECT-Anweisung geschachtelt ist.
Das Ergebnis der Unterabfrage wird im Spaltenausdruck (z. B. hier: xyz)
ausgegeben.
INNER JOIN
LEFT JOIN / LEFT OUTER JOIN
RIGHT JOIN / RIGHT OUTER JOIN
FULL JOIN
WHERE
WHERE EXISTS ( subquery )
WHERE NOT EXISTS ( subquery )
GROUP BY Spaltenname 1 [,Spaltenname2, ...]
ORDER BY Spaltenname 1 [,Spaltenname2,...]
ASC DESC
Syntax
Eliminiert Redundanzen, die in einer Tabellen auftreten können, Werte werden
jeweils nur einmal angezeigt.
Liefert nur die Datensätze zweier Tabellen, die gleiche Datenwerte enthalten
Liefert von der erstgenannten (linken) Tabelle alle Datensätze und von der zweiten
Tabelle jene, deren Datenwerte mit denen der ersten Tabelle übereinstimmen
Liefert von der zweiten (rechten) Tabelle alle Datensätze und von der ersten Tabelle
jene, deren Datenwerte mit denen der zweiten Tabelle übereinstimmen
Liefert aus beiden Tabellen jeweils alle Datensätze
Bedingung, nach der Datensätze ausgewählt werden sollen
Die Bedingungen EXISTS prüft, ob die Suchbedingung einer Unterabfrage
mindestens eine Zeile zurückliefert. NOT EXIST negiert die Bedingung.
Gruppierung (Aggregation) nach Inhalt des genannten Feldes
Sortierung nach Inhalt des genannten Feldes oder der genannten Felder
ASC: aufsteigend; DESC: absteigend
Beschreibung
Datenmanipulation
DELETE FROM Tabellenname
Löschen von Datensätzen in der genannten Tabelle
UPDATE Tabellenname SET
Aktualisiert Daten in Feldern einer Tabelle
INSERT INTO Tabellenname
Fügt Datensätze in die genannte Tabelle, die entweder mit festen Werten belegt
VALUES (Wert für Spalte 1 [, Wert für Spalte 2, ...I) oder Ergebnis eines SELECT-Befehls sind
oder
SELECT ... FROM ... WHERE
Fortsetzung SQL-Syntax →
ZPA FIB Ganz | 5


6
Aggregatfunktionen
AVG(Spaltenname)
COUNT(Spaltenname | *)
SUM(Spaltenname | Formel)
MIN(Spaltenname | Formel)
MAX (Spaltenname | Formel)
Funktionen
LEFT(Zeichenkette, Anzahlzeichen)
RIGHT(Zeichenkette, Anzahlzeichen)
CURRENT
CONVERT(time,[DatumZeit])
DATE(Wert)
DAY(Datum)
MONTH(Datum)
TODAY
WEEKDAY(Datum)
YEAR(Datum)
DATEADD(Datumsteil, Intervall, Datum)
DATEDIFF (Datumsteil, Anfangsdatum, Enddatum)
Datumsteile: DAY, MONTH, YEAR
Operatoren
AND
LIKE
NOT
OR
IS
>, >=, <, <=,<>
Ermittelt das arithmetische Mittel aller Werte im angegebenen Feld
Ermittelt die Anzahl der Datensätze mit Nicht-NULL-Werten im angegebenen Feld
oder alle Datensätze der Tabelle (dann mit Operator *)
Ermittelt die Summe aller Werte im angegebenen Feld oder der Formelergebnisse
Ermittelt den kleinsten aller Werte im angegebenen Feld
Ermittelt den größten aller Werte im angegebenen Feld
Liefert Anzahlzeichen der Zeichenkette von links.
Liefert Anzahlzeichen der Zeichenkette von rechts.
Liefert das aktuelle Datum mit der aktuellen Uhrzeit
Liefert die Uhrzeit aus einer DatumZeit-Angabe
Wandelt einen Wert in ein Datum um
Liefert den Tag des Monats aus dem angegebenen Datum
Liefert den Monat aus dem angegebenen Datum
Liefert das aktuelle Datum
Liefert den Tag der Woche aus dem angegebenen Datum
Liefert das Jahr aus dem angegebenen Datum
Fügt einem Datum ein Intervall (ausgedrückt in den unter Datumsteil angegebenen
Einheiten) hinzu
Liefert Enddatum-Startdatum (ausgedrückt in den unter Datumsteil angegebenen
Einheiten)
Logisches UND
Überprüfung von Textattributen auf Gleichheit, Verwendung von Platzhaltern
möglich
Logische Negation
Logisches ODER
Uberprüfung auf NULL
Test auf Gleichheit
Test auf Ungleichheit
Multiplikation
Addition, positives Vorzeichen
Subtraktion, negatives Vorzeichen
Stand 2018-03-29
ZPA FIB Ganz | 6
