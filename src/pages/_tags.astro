---
import { getCollection } from 'astro:content';

const docs = await getCollection('docs');

console.log("Dokumente geladen:", docs); // Zeigt, ob Dokumente geladen werden

// Alle Tags sammeln und die Häufigkeit berechnen
const tagCounts: Record<string, number> = {};

docs.forEach(doc => {
  console.log("Verarbeite Dokument:", doc.slug, doc.data.tags); // Debugging
  (doc.data as { tags?: string[] }).tags?.forEach((tag: string) => {
    if (!tagCounts[tag]) tagCounts[tag] = 0;
    tagCounts[tag]++;
  });
});

console.log("Gesammelte Tags:", tagCounts); // Zeigt, ob Tags gefunden wurden

// Tags nach Häufigkeit sortieren
const sortedTags = Object.entries(tagCounts)
  .sort((a, b) => b[1] - a[1]);

// Alle Tags sammeln und die Häufigkeit berechnen
// const tagCounts: Record<string, number> = {};

docs.forEach(doc => {
  (doc.data as { tags?: string[] }).tags?.forEach((tag: string) => {
    if (!tagCounts[tag]) tagCounts[tag] = 0;
    tagCounts[tag]++;
  });
});

// Tags nach Häufigkeit sortieren
// const sortedTags = Object.entries(tagCounts)
//  .sort((a, b) => b[1] - a[1]);

// Funktion zur Bestimmung der Schriftgröße basierend auf der Häufigkeit
const getFontSize = (count: number) => {
  const minSize = 12;
  const maxSize = 32;
  const maxCount = sortedTags[0]?.[1] || 1; // Höchster Tag-Wert als Referenz
  return `${minSize + (maxSize - minSize) * (count / maxCount)}px`;
};
---

<h1>Tag-Wolke</h1>

<div class="tag-cloud">
  {sortedTags.map(([tag, count]) => (
    <a href={`#${tag}`} class="tag" style={`font-size: ${getFontSize(count)}`}>
      {tag} ({count})
    </a>
  ))}
</div>

<style>
  body {
    background-color: #121212; /* Dark Mode Hintergrund */
    color: #ffffff; /* Weiße Schrift für bessere Lesbarkeit */
  }

  .tag-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
    justify-content: center;
    padding: 1rem;
  }

  .tag {
    text-decoration: none;
    color: #80b3ff; /* Hellblau für Kontrast */
    font-weight: bold;
    background: rgba(255, 255, 255, 0.1); /* Leichte Transparenz */
    padding: 0.3rem 0.8rem;
    border-radius: 0.25rem;
    transition: transform 0.2s, background 0.3s;
  }

  .tag:hover {
    transform: scale(1.2);
    background: rgba(255, 255, 255, 0.2); /* Hellerer Hover-Effekt */
  }
</style>